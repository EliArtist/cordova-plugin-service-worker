#!/usr/bin/env node

/**************
 * Author: thomas.jaede@tenefit.com
 * Jun 2 2020
 * 
 * This script watches the plugin's javascript files and
 * and writes changes to the ios build directory of an application
 * provided as an argument. This allows a developer to make changes 
 * directly in the plugin project and see them reflected in the iOS 
 * build.
 * 
 * Known limitations:
 * - This has only been tested with with cordova-ios 4.5.4
 * 
 * 
 */

/***
 * Dependencies
 */
const fs = require("fs"),
  path = require("path"),
  watch = require('node-watch'),
  yargs = require('yargs');


const PluginModule = require("./scripts/lib/plugin-module.js");

/***
 * Constants
 */
const PROJECT_DIR = process.cwd();
const PARENT_DIR = path.join(PROJECT_DIR, "../");
const PLUGIN_CONFIG_RELATIVE_PATH = "plugin.xml";
const PLUGIN_ASSETS_RELATIVE_PATH = "www";
const APP_IOS_RELATIVE_PATH = "platforms/ios/";
const APP_WEB_RELATIVE_PATH = "web/";

/***
 * Utils
 */
const browserifyBundleRegexp = /\"cordova\/plugin_list\"/m; //Assumes bundling is performed by browserify
arePluginsBundled = (iosBuildPath) => {
  const cordovaJSPath = path.join(iosBuildPath, "www/cordova.js"),
      content = fs.readFileSync(cordovaJSPath, "utf8");

      return browserifyBundleRegexp.test(content);
};

makeApplicationContextForPath = (options) => {
  const absoluteApplicationPath = path.join(PROJECT_DIR, options.application),
    packageJson = require(path.join(absoluteApplicationPath, "package.json")),
    webRelativePath = options.web || APP_WEB_RELATIVE_PATH,
    iosBuildPath = path.join(absoluteApplicationPath, APP_IOS_RELATIVE_PATH);

  return {
    isBundled: arePluginsBundled(iosBuildPath),
    iosBuild: iosBuildPath,
    name: packageJson.displayName,
    root: absoluteApplicationPath,
    web: path.join(absoluteApplicationPath, webRelativePath)
  };
};

/***
 * Logic
 */
const options = yargs
  .usage("Usage: -a <application> -w <web>")
  .option("a", {
    alias: "application",
    describe: "Path to the test application",
    type: "string",
    demandOption: true
  })
  .option("w", {
    alias: "web",
    describe: "Path to the web directory in which cordova.js is located",
    type: "string",
    demandOption: false
  })
  .argv;

const appContext = makeApplicationContextForPath(options);
const pluginAssetsPath = path.join(PROJECT_DIR, PLUGIN_ASSETS_RELATIVE_PATH);

PluginModule.parseModulesWithPluginConfigurationAtPath(PLUGIN_CONFIG_RELATIVE_PATH, appContext.isBundled);

console.log("Syncing plugin with application ", appContext.root);

watch(pluginAssetsPath, {
  recursive: true
}, (event, absoluteSource) => {
  const relativeSource = absoluteSource.replace(PROJECT_DIR + "/", "");
  const module = PluginModule.modulesBySource[relativeSource];
  const results = module.syncAllTargets(appContext);
  console.log("Changes in (" + absoluteSource.replace(PARENT_DIR, "") + ") synced to...");
  results.forEach((target) => {
    console.log("   " + target.replace(PARENT_DIR, ""));
  });
});